//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `CoreDataBase`.
    static let coreDataBase = _R.storyboard.coreDataBase()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `OnBoardingScreen`.
    static let onBoardingScreen = _R.storyboard.onBoardingScreen()
    /// Storyboard `ProfileScreen`.
    static let profileScreen = _R.storyboard.profileScreen()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `TutorialScreens`.
    static let tutorialScreens = _R.storyboard.tutorialScreens()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CoreDataBase", bundle: ...)`
    static func coreDataBase(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.coreDataBase)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OnBoardingScreen", bundle: ...)`
    static func onBoardingScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onBoardingScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProfileScreen", bundle: ...)`
    static func profileScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profileScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TutorialScreens", bundle: ...)`
    static func tutorialScreens(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorialScreens)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 20 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BlackAndWhiteColor`.
    static let blackAndWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlackAndWhiteColor")
    /// Color `Black`.
    static let black = Rswift.ColorResource(bundle: R.hostingBundle, name: "Black")
    /// Color `BorderColor`.
    static let borderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BorderColor")
    /// Color `ButtonBackground`.
    static let buttonBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "ButtonBackground")
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")
    /// Color `EditButtonColor`.
    static let editButtonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "EditButtonColor")
    /// Color `HeaderLabel`.
    static let headerLabel = Rswift.ColorResource(bundle: R.hostingBundle, name: "HeaderLabel")
    /// Color `LightGreenColor`.
    static let lightGreenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGreenColor")
    /// Color `TextfieldBackground`.
    static let textfieldBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextfieldBackground")
    /// Color `ViewControllerBackground`.
    static let viewControllerBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "ViewControllerBackground")
    /// Color `darkred`.
    static let darkred = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkred")
    /// Color `labelColor-1`.
    static let labelColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "labelColor-1")
    /// Color `lightGrayTextfieldBg`.
    static let lightGrayTextfieldBg = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGrayTextfieldBg")
    /// Color `lightGray`.
    static let lightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGray")
    /// Color `lightPink`.
    static let lightPink = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightPink")
    /// Color `navyBlueColor`.
    static let navyBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "navyBlueColor")
    /// Color `placeHolderColor`.
    static let placeHolderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "placeHolderColor")
    /// Color `switchCollor`.
    static let switchCollor = Rswift.ColorResource(bundle: R.hostingBundle, name: "switchCollor")
    /// Color `switchColor-1`.
    static let switchColor1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "switchColor-1")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlackAndWhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blackAndWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blackAndWhiteColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BorderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func borderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.borderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ButtonBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "EditButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func editButtonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.editButtonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "HeaderLabel", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func headerLabel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.headerLabel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGreenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGreenColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextfieldBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textfieldBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textfieldBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ViewControllerBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func viewControllerBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.viewControllerBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkred", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkred(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkred, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "labelColor-1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func labelColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.labelColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGrayTextfieldBg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrayTextfieldBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrayTextfieldBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightPink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightPink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightPink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "navyBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navyBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navyBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "placeHolderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func placeHolderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.placeHolderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "switchCollor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func switchCollor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.switchCollor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "switchColor-1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func switchColor1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.switchColor1, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.black.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlackAndWhiteColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blackAndWhiteColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blackAndWhiteColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BorderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func borderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.borderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ButtonBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "EditButtonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func editButtonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.editButtonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "HeaderLabel", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func headerLabel(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.headerLabel.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGreenColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGreenColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGreenColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextfieldBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textfieldBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textfieldBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ViewControllerBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func viewControllerBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.viewControllerBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darkred", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkred(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkred.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "labelColor-1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func labelColor1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.labelColor1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightGrayTextfieldBg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGrayTextfieldBg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGrayTextfieldBg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightPink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightPink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightPink.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "navyBlueColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func navyBlueColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.navyBlueColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "placeHolderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func placeHolderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.placeHolderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "switchCollor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func switchCollor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.switchCollor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "switchColor-1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func switchColor1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.switchColor1.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 23 files.
  struct file {
    /// Resource file `AppLogo.pdf`.
    static let appLogoPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "AppLogo", pathExtension: "pdf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `GooglegoogleButton.png`.
    static let googlegoogleButtonPng = Rswift.FileResource(bundle: R.hostingBundle, name: "GooglegoogleButton", pathExtension: "png")
    /// Resource file `OFL.txt`.
    static let oflTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "OFL", pathExtension: "txt")
    /// Resource file `Poppins-Black.ttf`.
    static let poppinsBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Black", pathExtension: "ttf")
    /// Resource file `Poppins-BlackItalic.ttf`.
    static let poppinsBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BlackItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Bold.ttf`.
    static let poppinsBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Bold", pathExtension: "ttf")
    /// Resource file `Poppins-BoldItalic.ttf`.
    static let poppinsBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-BoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBold.ttf`.
    static let poppinsExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBold", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraBoldItalic.ttf`.
    static let poppinsExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLight.ttf`.
    static let poppinsExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLight", pathExtension: "ttf")
    /// Resource file `Poppins-ExtraLightItalic.ttf`.
    static let poppinsExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Italic.ttf`.
    static let poppinsItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Italic", pathExtension: "ttf")
    /// Resource file `Poppins-Light.ttf`.
    static let poppinsLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Light", pathExtension: "ttf")
    /// Resource file `Poppins-LightItalic.ttf`.
    static let poppinsLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-LightItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Medium.ttf`.
    static let poppinsMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Medium", pathExtension: "ttf")
    /// Resource file `Poppins-MediumItalic.ttf`.
    static let poppinsMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-MediumItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Regular.ttf`.
    static let poppinsRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Regular", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBold.ttf`.
    static let poppinsSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBold", pathExtension: "ttf")
    /// Resource file `Poppins-SemiBoldItalic.ttf`.
    static let poppinsSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Poppins-Thin.ttf`.
    static let poppinsThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-Thin", pathExtension: "ttf")
    /// Resource file `Poppins-ThinItalic.ttf`.
    static let poppinsThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Poppins-ThinItalic", pathExtension: "ttf")
    /// Resource file `dee-copper-and-wild-yf61jhXNmYo-unsplash.jpg`.
    static let deeCopperAndWildYf61jhXNmYoUnsplashJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "dee-copper-and-wild-yf61jhXNmYo-unsplash", pathExtension: "jpg")

    /// `bundle.url(forResource: "AppLogo", withExtension: "pdf")`
    static func appLogoPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appLogoPdf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GooglegoogleButton", withExtension: "png")`
    static func googlegoogleButtonPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googlegoogleButtonPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OFL", withExtension: "txt")`
    static func oflTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oflTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Black", withExtension: "ttf")`
    static func poppinsBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BlackItalic", withExtension: "ttf")`
    static func poppinsBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Bold", withExtension: "ttf")`
    static func poppinsBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-BoldItalic", withExtension: "ttf")`
    static func poppinsBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBold", withExtension: "ttf")`
    static func poppinsExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraBoldItalic", withExtension: "ttf")`
    static func poppinsExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLight", withExtension: "ttf")`
    static func poppinsExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ExtraLightItalic", withExtension: "ttf")`
    static func poppinsExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Italic", withExtension: "ttf")`
    static func poppinsItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Light", withExtension: "ttf")`
    static func poppinsLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-LightItalic", withExtension: "ttf")`
    static func poppinsLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Medium", withExtension: "ttf")`
    static func poppinsMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-MediumItalic", withExtension: "ttf")`
    static func poppinsMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Regular", withExtension: "ttf")`
    static func poppinsRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBold", withExtension: "ttf")`
    static func poppinsSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-SemiBoldItalic", withExtension: "ttf")`
    static func poppinsSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-Thin", withExtension: "ttf")`
    static func poppinsThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Poppins-ThinItalic", withExtension: "ttf")`
    static func poppinsThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.poppinsThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dee-copper-and-wild-yf61jhXNmYo-unsplash", withExtension: "jpg")`
    static func deeCopperAndWildYf61jhXNmYoUnsplashJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.deeCopperAndWildYf61jhXNmYoUnsplashJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Poppins-BlackItalic`.
    static let poppinsBlackItalic = Rswift.FontResource(fontName: "Poppins-BlackItalic")
    /// Font `Poppins-Black`.
    static let poppinsBlack = Rswift.FontResource(fontName: "Poppins-Black")
    /// Font `Poppins-BoldItalic`.
    static let poppinsBoldItalic = Rswift.FontResource(fontName: "Poppins-BoldItalic")
    /// Font `Poppins-Bold`.
    static let poppinsBold = Rswift.FontResource(fontName: "Poppins-Bold")
    /// Font `Poppins-ExtraBoldItalic`.
    static let poppinsExtraBoldItalic = Rswift.FontResource(fontName: "Poppins-ExtraBoldItalic")
    /// Font `Poppins-ExtraBold`.
    static let poppinsExtraBold = Rswift.FontResource(fontName: "Poppins-ExtraBold")
    /// Font `Poppins-ExtraLightItalic`.
    static let poppinsExtraLightItalic = Rswift.FontResource(fontName: "Poppins-ExtraLightItalic")
    /// Font `Poppins-ExtraLight`.
    static let poppinsExtraLight = Rswift.FontResource(fontName: "Poppins-ExtraLight")
    /// Font `Poppins-Italic`.
    static let poppinsItalic = Rswift.FontResource(fontName: "Poppins-Italic")
    /// Font `Poppins-LightItalic`.
    static let poppinsLightItalic = Rswift.FontResource(fontName: "Poppins-LightItalic")
    /// Font `Poppins-Light`.
    static let poppinsLight = Rswift.FontResource(fontName: "Poppins-Light")
    /// Font `Poppins-MediumItalic`.
    static let poppinsMediumItalic = Rswift.FontResource(fontName: "Poppins-MediumItalic")
    /// Font `Poppins-Medium`.
    static let poppinsMedium = Rswift.FontResource(fontName: "Poppins-Medium")
    /// Font `Poppins-Regular`.
    static let poppinsRegular = Rswift.FontResource(fontName: "Poppins-Regular")
    /// Font `Poppins-SemiBoldItalic`.
    static let poppinsSemiBoldItalic = Rswift.FontResource(fontName: "Poppins-SemiBoldItalic")
    /// Font `Poppins-SemiBold`.
    static let poppinsSemiBold = Rswift.FontResource(fontName: "Poppins-SemiBold")
    /// Font `Poppins-ThinItalic`.
    static let poppinsThinItalic = Rswift.FontResource(fontName: "Poppins-ThinItalic")
    /// Font `Poppins-Thin`.
    static let poppinsThin = Rswift.FontResource(fontName: "Poppins-Thin")

    /// `UIFont(name: "Poppins-Black", size: ...)`
    static func poppinsBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlack, size: size)
    }

    /// `UIFont(name: "Poppins-BlackItalic", size: ...)`
    static func poppinsBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBlackItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Bold", size: ...)`
    static func poppinsBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBold, size: size)
    }

    /// `UIFont(name: "Poppins-BoldItalic", size: ...)`
    static func poppinsBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBold", size: ...)`
    static func poppinsExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBold, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraBoldItalic", size: ...)`
    static func poppinsExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLight", size: ...)`
    static func poppinsExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLight, size: size)
    }

    /// `UIFont(name: "Poppins-ExtraLightItalic", size: ...)`
    static func poppinsExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Italic", size: ...)`
    static func poppinsItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Light", size: ...)`
    static func poppinsLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLight, size: size)
    }

    /// `UIFont(name: "Poppins-LightItalic", size: ...)`
    static func poppinsLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsLightItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Medium", size: ...)`
    static func poppinsMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMedium, size: size)
    }

    /// `UIFont(name: "Poppins-MediumItalic", size: ...)`
    static func poppinsMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsMediumItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Regular", size: ...)`
    static func poppinsRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsRegular, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBold", size: ...)`
    static func poppinsSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBold, size: size)
    }

    /// `UIFont(name: "Poppins-SemiBoldItalic", size: ...)`
    static func poppinsSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Poppins-Thin", size: ...)`
    static func poppinsThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThin, size: size)
    }

    /// `UIFont(name: "Poppins-ThinItalic", size: ...)`
    static func poppinsThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: poppinsThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.poppinsBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Black' could not be loaded, is 'Poppins-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BlackItalic' could not be loaded, is 'Poppins-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Bold' could not be loaded, is 'Poppins-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-BoldItalic' could not be loaded, is 'Poppins-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBold' could not be loaded, is 'Poppins-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraBoldItalic' could not be loaded, is 'Poppins-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLight' could not be loaded, is 'Poppins-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ExtraLightItalic' could not be loaded, is 'Poppins-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Italic' could not be loaded, is 'Poppins-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Light' could not be loaded, is 'Poppins-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-LightItalic' could not be loaded, is 'Poppins-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Medium' could not be loaded, is 'Poppins-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-MediumItalic' could not be loaded, is 'Poppins-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Regular' could not be loaded, is 'Poppins-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBold' could not be loaded, is 'Poppins-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-SemiBoldItalic' could not be loaded, is 'Poppins-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-Thin' could not be loaded, is 'Poppins-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.poppinsThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Poppins-ThinItalic' could not be loaded, is 'Poppins-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 36 images.
  struct image {
    /// Image `BackbackButton`.
    static let backbackButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackbackButton")
    /// Image `FacebookIconLogin`.
    static let facebookIconLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "FacebookIconLogin")
    /// Image `Facebookfacebook (1)`.
    static let facebookfacebook1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facebookfacebook (1)")
    /// Image `GooglegoogleButton (1)`.
    static let googlegoogleButton1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GooglegoogleButton (1)")
    /// Image `GooglegoogleButton`.
    static let googlegoogleButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "GooglegoogleButton")
    /// Image `Group 84back`.
    static let group84back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 84back")
    /// Image `Icon material-lock-outlinepassword`.
    static let iconMaterialLockOutlinepassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon material-lock-outlinepassword")
    /// Image `LoginLoginScreen`.
    static let loginLoginScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "LoginLoginScreen")
    /// Image `OnBoardingScreenOne`.
    static let onBoardingScreenOne = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoardingScreenOne")
    /// Image `OnBoardingScreenThree`.
    static let onBoardingScreenThree = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoardingScreenThree")
    /// Image `OnBoardingScreenTwo`.
    static let onBoardingScreenTwo = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnBoardingScreenTwo")
    /// Image `SettingDarkMode`.
    static let settingDarkMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingDarkMode")
    /// Image `SettingLanguage`.
    static let settingLanguage = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingLanguage")
    /// Image `SettingLoginAndSecurity`.
    static let settingLoginAndSecurity = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingLoginAndSecurity")
    /// Image `SettingNotification`.
    static let settingNotification = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingNotification")
    /// Image `SettingPayment`.
    static let settingPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingPayment")
    /// Image `SignupImage`.
    static let signupImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "SignupImage")
    /// Image `Vectorback`.
    static let vectorback = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vectorback")
    /// Image `WelcomewelcomeScreen`.
    static let welcomewelcomeScreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "WelcomewelcomeScreen")
    /// Image `accountuserName`.
    static let accountuserName = Rswift.ImageResource(bundle: R.hostingBundle, name: "accountuserName")
    /// Image `arrowGo`.
    static let arrowGo = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowGo")
    /// Image `avatorprofileImage`.
    static let avatorprofileImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatorprofileImage")
    /// Image `dee-copper-and-wild-yf61jhXNmYo-unsplash.jpg`.
    static let deeCopperAndWildYf61jhXNmYoUnsplashJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "dee-copper-and-wild-yf61jhXNmYo-unsplash.jpg")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `eyeSlash`.
    static let eyeSlash = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeSlash")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `faceBookIconLogin`.
    static let faceBookIconLogin = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceBookIconLogin")
    /// Image `imageprofile`.
    static let imageprofile = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageprofile")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `passwordIcon`.
    static let passwordIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "passwordIcon")
    /// Image `passwordNotShowing`.
    static let passwordNotShowing = Rswift.ImageResource(bundle: R.hostingBundle, name: "passwordNotShowing")
    /// Image `phoneIcon`.
    static let phoneIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "phoneIcon")
    /// Image `phone`.
    static let phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone")
    /// Image `toggleradioOff`.
    static let toggleradioOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggleradioOff")
    /// Image `toggletoggleRadioOn`.
    static let toggletoggleRadioOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "toggletoggleRadioOn")
    /// Image `userIcon`.
    static let userIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "userIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackbackButton", bundle: ..., traitCollection: ...)`
    static func backbackButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backbackButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FacebookIconLogin", bundle: ..., traitCollection: ...)`
    static func facebookIconLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookIconLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Facebookfacebook (1)", bundle: ..., traitCollection: ...)`
    static func facebookfacebook1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookfacebook1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GooglegoogleButton (1)", bundle: ..., traitCollection: ...)`
    static func googlegoogleButton1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googlegoogleButton1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GooglegoogleButton", bundle: ..., traitCollection: ...)`
    static func googlegoogleButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googlegoogleButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 84back", bundle: ..., traitCollection: ...)`
    static func group84back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group84back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon material-lock-outlinepassword", bundle: ..., traitCollection: ...)`
    static func iconMaterialLockOutlinepassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMaterialLockOutlinepassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LoginLoginScreen", bundle: ..., traitCollection: ...)`
    static func loginLoginScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginLoginScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoardingScreenOne", bundle: ..., traitCollection: ...)`
    static func onBoardingScreenOne(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoardingScreenOne, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoardingScreenThree", bundle: ..., traitCollection: ...)`
    static func onBoardingScreenThree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoardingScreenThree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OnBoardingScreenTwo", bundle: ..., traitCollection: ...)`
    static func onBoardingScreenTwo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onBoardingScreenTwo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingDarkMode", bundle: ..., traitCollection: ...)`
    static func settingDarkMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingDarkMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingLanguage", bundle: ..., traitCollection: ...)`
    static func settingLanguage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingLanguage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingLoginAndSecurity", bundle: ..., traitCollection: ...)`
    static func settingLoginAndSecurity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingLoginAndSecurity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingNotification", bundle: ..., traitCollection: ...)`
    static func settingNotification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingNotification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SettingPayment", bundle: ..., traitCollection: ...)`
    static func settingPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingPayment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SignupImage", bundle: ..., traitCollection: ...)`
    static func signupImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signupImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vectorback", bundle: ..., traitCollection: ...)`
    static func vectorback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vectorback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WelcomewelcomeScreen", bundle: ..., traitCollection: ...)`
    static func welcomewelcomeScreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomewelcomeScreen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "accountuserName", bundle: ..., traitCollection: ...)`
    static func accountuserName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.accountuserName, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowGo", bundle: ..., traitCollection: ...)`
    static func arrowGo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowGo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatorprofileImage", bundle: ..., traitCollection: ...)`
    static func avatorprofileImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatorprofileImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dee-copper-and-wild-yf61jhXNmYo-unsplash.jpg", bundle: ..., traitCollection: ...)`
    static func deeCopperAndWildYf61jhXNmYoUnsplashJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deeCopperAndWildYf61jhXNmYoUnsplashJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeSlash", bundle: ..., traitCollection: ...)`
    static func eyeSlash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeSlash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faceBookIconLogin", bundle: ..., traitCollection: ...)`
    static func faceBookIconLogin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceBookIconLogin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "imageprofile", bundle: ..., traitCollection: ...)`
    static func imageprofile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageprofile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passwordIcon", bundle: ..., traitCollection: ...)`
    static func passwordIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passwordNotShowing", bundle: ..., traitCollection: ...)`
    static func passwordNotShowing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passwordNotShowing, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone", bundle: ..., traitCollection: ...)`
    static func phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phoneIcon", bundle: ..., traitCollection: ...)`
    static func phoneIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toggleradioOff", bundle: ..., traitCollection: ...)`
    static func toggleradioOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggleradioOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "toggletoggleRadioOn", bundle: ..., traitCollection: ...)`
    static func toggletoggleRadioOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toggletoggleRadioOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userIcon", bundle: ..., traitCollection: ...)`
    static func userIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Accounts`.
    static let accounts: Rswift.ReuseIdentifier<AccountTVCell> = Rswift.ReuseIdentifier(identifier: "Accounts")
    /// Reuse identifier `OnBoardingCell`.
    static let onBoardingCell: Rswift.ReuseIdentifier<OnBoardingCell> = Rswift.ReuseIdentifier(identifier: "OnBoardingCell")
    /// Reuse identifier `ShowUsersTableViewCell`.
    static let showUsersTableViewCell: Rswift.ReuseIdentifier<ShowUsersTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShowUsersTableViewCell")
    /// Reuse identifier `TableCellOne`.
    static let tableCellOne: Rswift.ReuseIdentifier<BasicDetailsTVCell> = Rswift.ReuseIdentifier(identifier: "TableCellOne")
    /// Reuse identifier `settings`.
    static let settings: Rswift.ReuseIdentifier<SettingsTVCell> = Rswift.ReuseIdentifier(identifier: "settings")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 10 localization keys.
    struct localizable {
      /// en translation:   Back
      ///
      /// Locales: en
      static let back = Rswift.StringResource(key: "back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem ipsum
      ///
      /// Locales: en
      static let title3 = Rswift.StringResource(key: "title3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem ipsum dolor sit
      ///
      /// Locales: en
      static let title2 = Rswift.StringResource(key: "title2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem ipsum dolor sit amet
      ///
      /// Locales: en
      static let description1 = Rswift.StringResource(key: "description1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem ipsum dolor sit amet,
      ///
      /// Locales: en
      static let description2 = Rswift.StringResource(key: "description2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem ipsum dolor sit amet, consetetur
      ///
      /// Locales: en
      static let title1 = Rswift.StringResource(key: "title1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed  
      ///
      /// Locales: en
      static let description3 = Rswift.StringResource(key: "description3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Oops!! Something went wrong...
      ///
      /// Locales: en
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: TItle
      ///
      /// Locales: en
      static let rishita = Rswift.StringResource(key: "rishita", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This is my app name
      ///
      /// Locales: en
      static let appname = Rswift.StringResource(key: "appname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation:   Back
      ///
      /// Locales: en
      static func back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "back"
        }

        return NSLocalizedString("back", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum
      ///
      /// Locales: en
      static func title3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title3"
        }

        return NSLocalizedString("title3", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit
      ///
      /// Locales: en
      static func title2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title2"
        }

        return NSLocalizedString("title2", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit amet
      ///
      /// Locales: en
      static func description1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description1"
        }

        return NSLocalizedString("description1", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit amet,
      ///
      /// Locales: en
      static func description2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description2"
        }

        return NSLocalizedString("description2", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit amet, consetetur
      ///
      /// Locales: en
      static func title1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title1"
        }

        return NSLocalizedString("title1", bundle: bundle, comment: "")
      }

      /// en translation: Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed  
      ///
      /// Locales: en
      static func description3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description3"
        }

        return NSLocalizedString("description3", bundle: bundle, comment: "")
      }

      /// en translation: Oops!! Something went wrong...
      ///
      /// Locales: en
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: TItle
      ///
      /// Locales: en
      static func rishita(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rishita", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rishita"
        }

        return NSLocalizedString("rishita", bundle: bundle, comment: "")
      }

      /// en translation: This is my app name
      ///
      /// Locales: en
      static func appname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appname"
        }

        return NSLocalizedString("appname", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try coreDataBase.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onBoardingScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profileScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try tutorialScreens.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct coreDataBase: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let crudViewController = StoryboardViewControllerResource<CRUDViewController>(identifier: "CRUDViewController")
      let name = "CoreDataBase"

      func crudViewController(_: Void = ()) -> CRUDViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: crudViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "imageprofile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageprofile' is used in storyboard 'CoreDataBase', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'CoreDataBase', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "lightGrayTextfieldBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightGrayTextfieldBg' is used in storyboard 'CoreDataBase', but couldn't be loaded.") }
        }
        if _R.storyboard.coreDataBase().crudViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'crudViewController' could not be loaded from storyboard 'CoreDataBase' as 'CRUDViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let sIgnUpViewController = StoryboardViewControllerResource<SIgnUpViewController>(identifier: "SIgnUpViewController")

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func sIgnUpViewController(_: Void = ()) -> SIgnUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sIgnUpViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "FacebookIconLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'FacebookIconLogin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GoogleIconLogin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GoogleIconLogin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon feather-eye-offnotShowing", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon feather-eye-offnotShowing' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icon material-lock-outlinepassword", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icon material-lock-outlinepassword' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "accountuserName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accountuserName' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().sIgnUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sIgnUpViewController' could not be loaded from storyboard 'Main' as 'SIgnUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onBoardingScreen: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnBoardingScreen"
      let onBoardingScreen = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "OnBoardingScreen")
      let onBoardingViewController = StoryboardViewControllerResource<OnBoardingViewController>(identifier: "OnBoardingViewController")
      let welcomeScreenViewController = StoryboardViewControllerResource<WelcomeScreenViewController>(identifier: "WelcomeScreenViewController")

      func onBoardingScreen(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onBoardingScreen)
      }

      func onBoardingViewController(_: Void = ()) -> OnBoardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onBoardingViewController)
      }

      func welcomeScreenViewController(_: Void = ()) -> WelcomeScreenViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeScreenViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "appLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appLogo' is used in storyboard 'OnBoardingScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BorderColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BorderColor' is used in storyboard 'OnBoardingScreen', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'OnBoardingScreen', but couldn't be loaded.") }
        }
        if _R.storyboard.onBoardingScreen().onBoardingScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onBoardingScreen' could not be loaded from storyboard 'OnBoardingScreen' as 'UIKit.UIViewController'.") }
        if _R.storyboard.onBoardingScreen().onBoardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onBoardingViewController' could not be loaded from storyboard 'OnBoardingScreen' as 'OnBoardingViewController'.") }
        if _R.storyboard.onBoardingScreen().welcomeScreenViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeScreenViewController' could not be loaded from storyboard 'OnBoardingScreen' as 'WelcomeScreenViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profileScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITableViewController

      let bundle = R.hostingBundle
      let name = "ProfileScreen"
      let profileScreen = StoryboardViewControllerResource<UIKit.UITableViewController>(identifier: "ProfileScreen")

      func profileScreen(_: Void = ()) -> UIKit.UITableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileScreen)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "accountuserName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accountuserName' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatorprofileImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatorprofileImage' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "toggleradioOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'toggleradioOff' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "toggletoggleRadioOn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'toggletoggleRadioOn' is used in storyboard 'ProfileScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profileScreen().profileScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileScreen' could not be loaded from storyboard 'ProfileScreen' as 'UIKit.UITableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Settings"
      let navigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "NavigationController")
      let settings = StoryboardViewControllerResource<SettingsViewController>(identifier: "Settings")

      func navigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navigationController)
      }

      func settings(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settings)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrowGo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowGo' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatorprofileImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatorprofileImage' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().navigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navigationController' could not be loaded from storyboard 'Settings' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.settings().settings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settings' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct tutorialScreens: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TutorialScreenViewController

      let bundle = R.hostingBundle
      let name = "TutorialScreens"

      static func validate() throws {
        if UIKit.UIImage(named: "accountuserName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'accountuserName' is used in storyboard 'TutorialScreens', but couldn't be loaded.") }
        if UIKit.UIImage(named: "avatorprofileImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatorprofileImage' is used in storyboard 'TutorialScreens', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in storyboard 'TutorialScreens', but couldn't be loaded.") }
        if UIKit.UIImage(named: "toggleradioOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'toggleradioOff' is used in storyboard 'TutorialScreens', but couldn't be loaded.") }
        if UIKit.UIImage(named: "toggletoggleRadioOn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'toggletoggleRadioOn' is used in storyboard 'TutorialScreens', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
